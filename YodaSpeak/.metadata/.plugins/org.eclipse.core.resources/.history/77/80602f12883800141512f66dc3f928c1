
#include <cpprest/http_client.h>

#include <yoda_speak.h>

using namespace web;
using namespace web::http;
using namespace web::http::client;

extern void log(const std::string &s);

namespace yoda_utilities
{

pplx::task<std::string> convert_to_yoda(const std::string &text)
{
	// TODO link
	http_client client("https://yoda.p.mashape.com/yoda");

	// Create HTTP an request.
	http_request yodaRequest(methods::GET);

	// Setup headers.
	yodaRequest.headers().add("X-Mashape-Key", "DSlFjSP2POmshMXUIwNwzSctK01Hp1GUpM6jsnGqDTXaPa22JP");

	// Setup and encode query parameters.
	uri_builder uriBuilder;
	uriBuilder.append_query("sentence", text);
	yodaRequest.set_request_uri(uriBuilder.to_string());

	// Initiate request
	pplx::task<http_response> requestTask = client.request(yodaRequest);

	// Extract and return the HTTP response body as a string.
	return requestTask.then([](http_response response)
	{
		if(response.status_code() != status_codes::OK)
		{
			// Handle non-success status code by returning a string with error message.
			std::stringstream errorMsg;
			errorMsg << "Unexpected HTTP status code from Yoda speak server: " << response.status_code();
			pplx::task_from_result(errorMsg.str());
		}

		return response.extract_string();
	});
}

pplx::task<std::string> check_grammar(const std::string &text)
{
	// TODO U macro...

	// Full details about the API at https://textalytics.com/core/stilus-info#doc
	http_client client("http://textalytics.com/core/stilus-1.2");

	// Create HTTP request.
	http_request grammarRequest(methods::POST);

	// Setup and encode query parameters.
	uri_builder uriBuilder;
	uriBuilder.append_query("key", "aec34196e80283133e400bfab67baddd"); // Substitute your own key if using.
	uriBuilder.append_query("lang", "en");
	uriBuilder.append_query("txt", text);
	grammarRequest.set_request_uri(uriBuilder.to_uri());

	// Initiate request
	pplx::task<http_response> requestTask = client.request(grammarRequest);

	// Extract and the HTTP response body as a JSON object.
	return requestTask.then([](http_response response)
	{
		if(response.status_code() != status_codes::OK)
		{
			// Handle non-success status code by returning a string with error message.
			std::stringstream errorMsg;
			errorMsg << "Unexpected HTTP status code from the textalytics server: " << response.status_code();
			pplx::task_from_result(errorMsg.str());
		}

		return response.extract_json();
	}).then([](const json::value &value)
	{
		// Service returns all sorts of information.
		// We only care to look at the array of error result objects.
		const json::array &resultList = value.at(U("result_list")).as_array();

		// TODO for each...
		for(const auto & result : resultList)
		{



		}

		return value.to_string();
	});
}

}
